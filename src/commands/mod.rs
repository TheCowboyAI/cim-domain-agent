//! Agent command definitions

use cim_domain::Command;
use uuid::Uuid;
use std::collections::HashSet;
use serde_json::Value;

/// Deploy a new agent
#[derive(Debug, Clone)]
pub struct DeployAgent {
    /// Agent's unique ID (generated by caller)
    pub id: Uuid,
    /// Agent type
    pub agent_type: crate::AgentType,
    /// Owner ID (person or organization)
    pub owner_id: Uuid,
    /// Agent metadata
    pub metadata: crate::AgentMetadata,
}

impl Command for DeployAgent {
    type Aggregate = crate::Agent;

    fn aggregate_id(&self) -> Option<cim_domain::EntityId<Self::Aggregate>> {
        Some(cim_domain::EntityId::from_uuid(self.id))
    }
}

/// Activate an agent
#[derive(Debug, Clone)]
pub struct ActivateAgent {
    /// Agent ID
    pub id: Uuid,
}

impl Command for ActivateAgent {
    type Aggregate = crate::Agent;

    fn aggregate_id(&self) -> Option<cim_domain::EntityId<Self::Aggregate>> {
        Some(cim_domain::EntityId::from_uuid(self.id))
    }
}

/// Suspend an agent
#[derive(Debug, Clone)]
pub struct SuspendAgent {
    /// Agent ID
    pub id: Uuid,
    /// Reason for suspension
    pub reason: String,
}

impl Command for SuspendAgent {
    type Aggregate = crate::Agent;

    fn aggregate_id(&self) -> Option<cim_domain::EntityId<Self::Aggregate>> {
        Some(cim_domain::EntityId::from_uuid(self.id))
    }
}

/// Set agent offline
#[derive(Debug, Clone)]
pub struct SetAgentOffline {
    /// Agent ID
    pub id: Uuid,
}

impl Command for SetAgentOffline {
    type Aggregate = crate::Agent;

    fn aggregate_id(&self) -> Option<cim_domain::EntityId<Self::Aggregate>> {
        Some(cim_domain::EntityId::from_uuid(self.id))
    }
}

/// Decommission an agent
#[derive(Debug, Clone)]
pub struct DecommissionAgent {
    /// Agent ID
    pub id: Uuid,
}

impl Command for DecommissionAgent {
    type Aggregate = crate::Agent;

    fn aggregate_id(&self) -> Option<cim_domain::EntityId<Self::Aggregate>> {
        Some(cim_domain::EntityId::from_uuid(self.id))
    }
}

/// Change agent capabilities
#[derive(Debug, Clone)]
pub struct ChangeAgentCapabilities {
    /// Agent ID
    pub id: Uuid,
    /// Capabilities to add
    pub add_capabilities: Vec<String>,
    /// Capabilities to remove
    pub remove_capabilities: Vec<String>,
}

impl Command for ChangeAgentCapabilities {
    type Aggregate = crate::Agent;

    fn aggregate_id(&self) -> Option<cim_domain::EntityId<Self::Aggregate>> {
        Some(cim_domain::EntityId::from_uuid(self.id))
    }
}

/// Grant permissions to an agent
#[derive(Debug, Clone)]
pub struct GrantAgentPermissions {
    /// Agent ID
    pub id: Uuid,
    /// Permissions to grant
    pub permissions: HashSet<String>,
}

impl Command for GrantAgentPermissions {
    type Aggregate = crate::Agent;

    fn aggregate_id(&self) -> Option<cim_domain::EntityId<Self::Aggregate>> {
        Some(cim_domain::EntityId::from_uuid(self.id))
    }
}

/// Revoke permissions from an agent
#[derive(Debug, Clone)]
pub struct RevokeAgentPermissions {
    /// Agent ID
    pub id: Uuid,
    /// Permissions to revoke
    pub permissions: HashSet<String>,
}

impl Command for RevokeAgentPermissions {
    type Aggregate = crate::Agent;

    fn aggregate_id(&self) -> Option<cim_domain::EntityId<Self::Aggregate>> {
        Some(cim_domain::EntityId::from_uuid(self.id))
    }
}

/// Enable tools for an agent
#[derive(Debug, Clone)]
pub struct EnableAgentTools {
    /// Agent ID
    pub id: Uuid,
    /// Tool definitions to enable
    pub tools: Vec<crate::ToolDefinition>,
}

impl Command for EnableAgentTools {
    type Aggregate = crate::Agent;

    fn aggregate_id(&self) -> Option<cim_domain::EntityId<Self::Aggregate>> {
        Some(cim_domain::EntityId::from_uuid(self.id))
    }
}

/// Disable tools for an agent
#[derive(Debug, Clone)]
pub struct DisableAgentTools {
    /// Agent ID
    pub id: Uuid,
    /// Tool names to disable
    pub tool_names: Vec<String>,
}

impl Command for DisableAgentTools {
    type Aggregate = crate::Agent;

    fn aggregate_id(&self) -> Option<cim_domain::EntityId<Self::Aggregate>> {
        Some(cim_domain::EntityId::from_uuid(self.id))
    }
}

/// Set agent configuration
#[derive(Debug, Clone)]
pub struct SetAgentConfiguration {
    /// Agent ID
    pub id: Uuid,
    /// Configuration key
    pub key: String,
    /// Configuration value
    pub value: Value,
}

impl Command for SetAgentConfiguration {
    type Aggregate = crate::Agent;

    fn aggregate_id(&self) -> Option<cim_domain::EntityId<Self::Aggregate>> {
        Some(cim_domain::EntityId::from_uuid(self.id))
    }
}

/// Remove agent configuration
#[derive(Debug, Clone)]
pub struct RemoveAgentConfiguration {
    /// Agent ID
    pub id: Uuid,
    /// Configuration key to remove
    pub key: String,
}

impl Command for RemoveAgentConfiguration {
    type Aggregate = crate::Agent;

    fn aggregate_id(&self) -> Option<cim_domain::EntityId<Self::Aggregate>> {
        Some(cim_domain::EntityId::from_uuid(self.id))
    }
}
